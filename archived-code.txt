OLD CSV READER TESTS (test/main.ml)

(* let csv = CsvReader.read_csv data_path

   (** [pp_string s] pretty-prints string [s]. *) let pp_string s = "\"" ^ s ^
   "\""

   (** [pp_list pp_elt lst] pretty-prints list [lst], using [pp_elt] to
   pretty-print each element of [lst]. *) let pp_list pp_elt lst = let pp_elts
   lst = let rec loop n acc = function | [] -> acc | [ h ] -> acc ^ pp_elt h |
   h1 :: (h2 :: t as t') -> if n = 100 then acc ^ "..." (* stop printing long
   list *) else loop (n + 1) (acc ^ pp_elt h1 ^ "; ") t' in loop 0 "" lst in "["
   ^ pp_elts lst ^ "]"

   let get_elem_tests = []

   (** TODO: add more test cases, add ~msg parameter if possible**) let
   get_col_tests = [ ( "first column, with header" >:: fun _ -> assert_equal [
   "Date"; "2018-10-01"; "2018-10-02"; "2018-10-03"; "2018-10-04"; "2018-10-05";
   ] (CsvReader.get_col ~header:true csv 0) ); ( "first column, no header" >::
   fun _ -> assert_equal [ "2018-10-01"; "2018-10-02"; "2018-10-03";
   "2018-10-04"; "2018-10-05" ] (CsvReader.get_col ~header:false csv 0) ); ]

   let get_row_tests = [] let csv_tests = List.flatten [ get_elem_tests;
   get_col_tests; get_row_tests ] let suite = "test suite for OCamelot" >:::
   List.flatten [ csv_tests ] let () = run_test_tt_main suite *)

_________________________________________________________________________________________

OWL IMPLEMENTATION

(** Signature *)
(* val five_day_graph : string list list -> unit (** Given a csv [csv], return
   the 5 day moving average line using the close price to give an average value
   to the 5 day period. *)

   val fifty_day_graph : string list list -> unit (** Given a csv [csv], return
   the 50 day moving average line using the close price to give an average value
   to the 50 day period. *)

   val overlay_graph : string list list -> unit (** Given a csv [csv], return an
   overlayed graph of 3 graphs: candle, 5 day moving average, and 50 day moving
   average graphs. *) *)

(** Struct*)
(* let five_day_graph (data : string list list) = let y2 = Mat.uniform 10 100 in
   let h = Plot.create ~m:1 ~n:2 "" in Plot.(boxplot ~h ~spec:[ RGB (0, 153, 51)
   ] y2); Plot.output h

   let fifty_day_graph (data : string list list) = let y2 = Mat.uniform 10 100
   in let h = Plot.create ~m:1 ~n:2 "" in Plot.(boxplot ~h ~spec:[ RGB (0, 153,
   51) ] y2); Plot.output h

   let overlay_graph (data : string list list) = let y2 = Mat.uniform 10 100 in
   let h = Plot.create ~m:1 ~n:2 "" in Plot.(boxplot ~h ~spec:[ RGB (0, 153, 51)
   ] y2); Plot.output h *)

_________________________________________________________________________________________

DUNE-PROJECT FILE EXTRAS
; (generate_opam_files true)

; (source
;  (github username/reponame))

; (authors "Author Name")

; (maintainers "Maintainer Name")

; (license LICENSE)

; (documentation https://url/to/documentation)

; (package
;  (name ocamelot)
;  (synopsis "A short synopsis")
;  (description "A longer description")
;  (depends ocaml dune)
;  (tags
;   (topics "to describe" your project)))

; See the complete stanza docs at https://dune.readthedocs.io/en/stable/dune-files.html#dune-project

_________________________________________________________________________________________
lib/csv_reader.ml

open Csv

module type CsvReaderType = sig
  val read_csv : string -> string list list
  (** Read a csv file with file name [filename] and converts it to a 2D-array of
      strings *)

  val get_elem : string list list -> int -> int -> string
  (** Given a csv [csv], return the element in [csv] located in row [i] and
      column [j]. *)

  val get_col : ?header:bool -> string list list -> int -> string list
  (** Given a csv [csv] that's been read, return the column at specified index
      [n]. *)

  val get_row : string list list -> int -> string list
  (** Given a csv [csv] that's been read, return the row at specified index [n]. *)
end

(** This module contains functions for reading CSV files and working with their
    data. *)
module CsvReader : CsvReaderType = struct
  let read_csv (filename : string) : string list list =
    load ~separator:',' filename

  (** Given a list [lst], return the element in that [lst] located at index [n] *)
  let rec get (lst : 'a list) (n : int) : 'a =
    match (lst, n) with
    | [], _ -> failwith "Index out of bounds"
    | h :: _, 0 -> h
    | _ :: t, n -> get t (n - 1)

  let get_elem (csv : string list list) (i : int) (j : int) : string =
    let row = get csv i in
    get row j

  (** Given a csv [csv] that's been read, return the csv without the header*)
  let no_header (csv : string list list) : string list list =
    match csv with
    | [] -> []
    | _ :: t -> t

  let rec get_col ?(header = false) (csv : string list list) (n : int) :
      string list =
    let csv = if header then csv else no_header csv in
    match csv with
    | [] -> []
    | row :: rest -> get row n :: get_col rest n

  let get_row (csv : string list list) (n : int) : string list = get csv n

  (* TODO: get column by title name *)
  (* TODO: ignore header option *)
end

